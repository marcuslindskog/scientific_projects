function AS_DisplayStimuli(stimuli, presentationTime,ISI, simseq, sideByside,sideBysideDistScale, dotColor,windowColor,visualSetup,screenSetup, print)

%A function to display the stimuli. This function merely displays stimuli
%on the screen and can print the stimuli if print = 1 to a series of bmp.

%
%stimuli: The stimuli matrix generated by AS_CreateStimuli
%stimulusTime: The duration of the stimulus presentation.
%ISI:
%simseq: If the presentation of the stimuli is simultaneous (0) or sequential (1)
%sideByside: 
%sideBysideDistScale:
%dotColor: 
%windowColor:
%visualSetup:
%screenSetup:
%print:

visualFeatures = AS_FindVisualFeatures(visualSetup, screenSetup);

minX = visualFeatures(4)/2 - visualFeatures(3)/2;
minY = visualFeatures(5)/2  -  visualFeatures(3)/2;
maxX = visualFeatures(4)/2  + visualFeatures(3)/2;
maxY = visualFeatures(5)/2  + visualFeatures(3)/2;


nrTrials = max(stimuli(:,1));

%Display settings
stimColorN1 = dotColor(1,:);
stimColorN2 = dotColor(2,:);

if sideByside == 0
    jitter = 0;
else
    jitter = sideBysideDistScale*visualFeatures(3);
end


%Find a position for each of the dots in the two sets. Dots are not allowed
%to overlap
dotPositions = AS_FindDotPositions(stimuli,visualFeatures);




% Find number of dots on each trial and number of dots in each set
nrDotsInTrial = zeros(nrTrials,1);
nrDotsInColor = zeros(nrTrials,2);
for k = 1:nrTrials
    nrDotsInTrial(k) = length(stimuli(stimuli(:,1)==k));
    nrDotsInColor(k,1) = length(stimuli(stimuli(:,1)==k & stimuli(:,8)==1));
    nrDotsInColor(k,2) = length(stimuli(stimuli(:,1)==k & stimuli(:,8)==2));
end

myTrialList = randsample(1:nrTrials, nrTrials);


% create the screen for presentation
[w, scherm] = Screen('OpenWindow',0, windowColor);
Screen('FillRect', w, windowColor);
Screen('Flip',w);

screenRect =  [0 0 visualFeatures(4) visualFeatures(5)];
if  print == 1
    imageArray=Screen('GetImage', w , screenRect);
    imwrite(imageArray, 'PrintedImages/blank.bmp');
end


%Make a matrix that can later bli displayed
for j = 1:nrTrials
    f = myTrialList(j);
    if f == 1
        startDot = 1;
    else
        startDot = 1 + sum(nrDotsInTrial(1:(f-1)));
    end
    
    endDot = startDot - 1 + nrDotsInTrial(f);
    
    trialDots = dotPositions(:,startDot:endDot);
    
    randColor = rand();
    
    if randColor> .5
        C1 = stimColorN1;
        C2 = stimColorN2;
        
    else
        C1 = stimColorN2;
        C2 = stimColorN1;
    end
    
    randPos = rand();
    
    if randPos <.50
        jitterUse = -jitter;
    else
        jitterUse = jitter;
    end
    
    
    if simseq == 0
        array1 = [trialDots(1,1:nrDotsInColor(f,1))+ jitterUse; trialDots(2,1:nrDotsInColor(f,1)); trialDots(3,1:nrDotsInColor(f,1))+ jitterUse;trialDots(4,1:nrDotsInColor(f,1))];
        array2 = [trialDots(1,nrDotsInColor(f,1)+1:size(trialDots,2))- jitterUse;trialDots(2,nrDotsInColor(f,1)+1:size(trialDots,2)); trialDots(3,nrDotsInColor(f,1)+1:size(trialDots,2))-jitterUse; trialDots(4,nrDotsInColor(f,1)+1:size(trialDots,2))];
        
        
        stim(j) = Screen('OpenOffscreenWindow', w, windowColor, screenRect);
        Screen('FillRect', stim(j), [0 0 0 0], screenRect);
        Screen('FillRect', stim(j), [255 255 255], [40 40 visualFeatures(4)/2-20 visualFeatures(5)-40]);
        Screen('FillRect', stim(j), [255 255 255], [visualFeatures(4)/2+20 40 visualFeatures(4)-40 visualFeatures(5)-40]);
        Screen('FillOval',stim(j), stimColorN1, array1);
        Screen('FillOval',stim(j), stimColorN2, array2);
        
        
    else
        firstStim(j) = Screen('OpenOffscreenWindow', w, windowColor, screenRect);
        Screen('FillOval', firstStim(j), stimColorN1,trialDots(:,1:nrDotsInColor(f,1)));
        
        secondStim(j)  = Screen('OpenOffscreenWindow', w, windowColor, screenRect);
        Screen('FillOval', secondStim(j), stimColorN2,trialDots(:,nrDotsInColor(f,1)+1:size(trialDots,2)));
    end
    
    
    
end

onset = Screen('Flip',w);

for i=1:nrTrials % forwards and backwards
    if simseq == 0
        Screen('CopyWindow',stim(i),w,screenRect,screenRect);
        onset = Screen('Flip',w,onset+ISI);
        if print ==0
            Screen('Close', stim(i));
        end
        Screen('FillRect', w, windowColor,screenRect);
        onset = Screen('Flip',w,onset+presentationTime);
    else
        Screen('CopyWindow',firstStim(i),w,screenRect,screenRect);
        onset = Screen('Flip',w,onset+ISI);
        Screen('FillRect', w, windowColor, screenRect);
        onset = Screen('Flip',w,onset+presentationTime);
        Screen('CopyWindow',secondStim(i),w,screenRect,screenRect);
        onset = Screen('Flip',w,onset+ISI);
        Screen('FillRect', w, windowColor, screenRect);
        onset = Screen('Flip',w,onset+presentationTime);
        if print == 0
            Screen('Close', firstStim(i));
            Screen('Close', secondStim(i));
        end
    end
end

if print == 1 && simseq ==0
    
    for k = 1:nrTrials
        imageArray=Screen('GetImage', stim(k));
        imageName = strcat('PrintedImages/',(int2str(k)),'.png');
        imwrite(imageArray, imageName);
        Screen('Close', stim(k));
    end
    
elseif print ==1 && simseq ==1
    
    for k = 1:nrTrials
        imageArray=Screen('GetImage', firstStim(k) , displayWindow);
        imageName = strcat((int2str(j)),'_1.bmp');
        imwrite(imageArray, imageName);
        
        
        imageArray=Screen('GetImage', secondStim(k) , displayWindow);
        imageName = strcat((int2str(j)),'_2.bmp');
        imwrite(imageArray, imageName);
        
        Screen('Close', firstStim(k));
        Screen('Close', secondStim(k));
        
    end
    
end


Screen('CloseAll');

jheapcl()